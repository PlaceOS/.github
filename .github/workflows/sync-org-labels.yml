# Applies the contents of `labels.json` to all repositories in the current org.
#
# Actions are additive only. Existing labels not defined in the json spec will
# be noted as warnings.
name: Sync Org Labels

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/org-labels.yml
      - labels.json
  workflow_dispatch:

jobs:
  sync-labels:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/github-script@v3
        with:
          script: |
            // Labels to apply
            const labels = require(`${process.env.GITHUB_WORKSPACE}/labels.json`);

            // Gets current labels available on repo
            const currentLabels = repo =>
              github.paginate(
                github.issues.listLabelsForRepo,
                repo,
                response => response.data.map(label => ({
                  name: label.name,
                  color: label.color,
                  description: label.description
                }))
              );

            // Syncs the config above with the target {owner, repo}
            const syncLabels = async repo => {
              const key = label => label.name.toLowerCase();

              const existing = new Map();
              (await currentLabels(repo)).forEach(label => existing.set(key(label), label));

              const updates = labels.map(async label => {
                try {
                  let label_k = key(label);
                  let current = existing.get(label_k);
                  existing.delete(label_k);
                  if (current == undefined) {
                    if (current = existing.get(label.alias)) {
                      core.info(`Renaming ${label.alias} to ${label.name}`);
                      return await github.issues.updateLabel({
                        ...repo,
                        name: label.alias,
                        new_name: label.name,
                        description: label.description,
                        color: label.color
                      });
                    } else {
                      core.info(`Creating ${label.name}`);
                      return await github.issues.createLabel({...repo, ...label});
                    }
                  } else if (current.color == label.color && current.description == label.description) {
                    core.info(`Skipping ${label.name}`);
                  } else {
                    core.info(`Updating ${label.name}`);
                    return await github.issues.updateLabel({...repo, ...label});
                  }
                } catch (err) {
                  core.error(`Error applying ${label.name}: ${err}`);
                  throw err;
                }
              });

              if (existing.size > 0) {
                const orphaned = Array.from(existing.keys());
                core.warning(`Additional labels exist on ${repo.repo}: ${orphaned.join(', ')}`);
              }

              return Promise.all(updates);
            };

            // Apply to config to all repos in the current org
            for await (const response of github.paginate.iterator(
              github.repos.listForOrg,
              { org: context.repo.owner }
            )) {
              for (const repo of response.data) {
                await core.group(repo.name, () => syncLabels({
                  owner: repo.owner.login,
                  repo: repo.name
                }).catch(core.setFailed));
              };
            };
